# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pr:
  autoCancel: true
  branches:
    include:
    - '*' # quote since "*" is a YAML reserved character

jobs:
- job: linux
  pool:
    vmImage: ubuntu-20.04
  steps:
  - script: sudo -E bash scripts/install-libpcap.sh
  - script: sudo -E bash scripts/install-tap.sh
  - script: sudo -E bash scripts/test.sh
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)

- job: macos
  pool:
    vmImage: macOS-11
  steps:
  - script: sudo -E bash scripts/install-dotnet.sh
  - script: sudo -E bash scripts/install-libpcap.sh
  - script: sudo sysctl -w net.inet.udp.maxdgram=65535
  - script: sudo -E bash scripts/test.sh
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)

  # This CI job is for testing of x86 architecture compatibility
- job: windows_2022_x86
  pool:
    vmImage: windows-2022
  steps:
  - pwsh: ./scripts/Install-windows.ps1
  - pwsh: ./scripts/Install-npcap.ps1
    env:
      npcap_oem_key: $(npcap_oem_key)
  - pwsh: .\scripts\install-winpkfilter.ps1
  - script: dotnet restore -s https://api.nuget.org/v3/index.json
  # NOTE: Remove filter when npcap has rpcapd support
  - script: bash scripts/test.sh --filter "TestCategory!=RemotePcap" -r win-x86
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)

- job: windows_2022_npcap
  pool:
    vmImage: windows-2022
  steps:
  - pwsh: ./scripts/Install-windows.ps1
  - pwsh: ./scripts/Install-npcap.ps1
    env:
      npcap_oem_key: $(npcap_oem_key)
  - pwsh: .\scripts\install-winpkfilter.ps1
  - script: dotnet restore -s https://api.nuget.org/v3/index.json
  # NOTE: Remove filter when npcap has rpcapd support
  - script: bash scripts/test.sh --filter "TestCategory!=RemotePcap"
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)
